generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 Int            @id @default(autoincrement())
  username           String         @unique
  isActive           Boolean        @default(false) @map("is_active")
  isGoogleAccount    Boolean        @default(false) @map("is_google_account")
  activationToken    String?        @unique @map("activation_token")
  transactions       Transaction[]
  fixedExpenses      FixedExpense[]
  salary             Salary[]
  createdAt          DateTime       @default(now()) @map("created_at")
  updatedAt          DateTime       @updatedAt @map("updated_at")
  apiKey             String?        @unique @map("api_key")
  enable2FA          Boolean        @default(false) @map("enable_2fa")
  twoFASecret        String?        @map("2fa_secret")
  password           String?
  email              String         @unique
  lastName           String?        @map("last_name")
  firstName          String?        @map("first_name")
  resetPasswordToken String?        @map("reset_password_token")

  @@index([username, email], name: "user_search_idx")
  @@map("users")
}

model Transaction {
  id          Int             @id @default(autoincrement())
  userId      Int             @map("user_id")
  user        User            @relation(fields: [userId], references: [id])
  amount      Float
  date        DateTime
  category    String
  description String?
  type        TransactionType
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")

  @@index([date, category], name: "transaction_date_category_idx")
  @@map("transactions")
}

enum TransactionType {
  FixedExpense
  VariableExpense
  Savings
}

model FixedExpense {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique @map("user_id")
  user        User     @relation(fields: [userId], references: [id])
  amount      Float
  category    String
  dueDate     DateTime @map("due_date")
  reminder    Boolean
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@index([dueDate, category], name: "fixed_expense_due_date_category_idx")
  @@map("fixed_expenses")
}

enum Mes {
  Enero
  Febrero
  Marzo
  Abril
  Mayo
  Junio
  Julio
  Agosto
  Septiembre
  Octubre
  Noviembre
  Diciembre
}

model Salary {
  id           Int           @id @default(autoincrement())
  userId       Int           @map("user_id")
  user         User          @relation(fields: [userId], references: [id])
  amount       Float
  month        Mes
  year         Int
  distribution Distribution?
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")

  @@index([month, year], name: "salary_month_year_idx")
  @@map("salaries")
}

model Distribution {
  id               Int      @id @default(autoincrement())
  salaryId         Int      @unique() @map("salary_id")
  salary           Salary   @relation(fields: [salaryId], references: [id])
  fixedExpenses    Float    @map("fixed_expenses")
  variableExpenses Float    @map("variable_expenses")
  savings          Float
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  @@index([fixedExpenses, variableExpenses, savings], name: "distribution_idx")
  @@map("distributions")
}
